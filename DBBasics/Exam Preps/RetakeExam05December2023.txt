--01 DDL

CREATE TABLE Passengers(
			 Id INT PRIMARY KEY IDENTITY,
			 [Name] NVARCHAR(80) NOT NULL
)

CREATE TABLE Towns(
			 Id INT PRIMARY KEY IDENTITY,
			 [Name] VARCHAR(30) NOT NULL
)

CREATE TABLE RailwayStations(
			 Id INT PRIMARY KEY IDENTITY,
			 [Name] VARCHAR(50) NOT NULL,
			 TownId INT NOT NULL FOREIGN KEY REFERENCES Towns(Id)
)

CREATE TABLE Trains(
			 Id INT PRIMARY KEY IDENTITY,
			 HourOfDeparture VARCHAR(5) NOT NULL,
			 HourOfArrival VARCHAR(5) NOT NULL,
			 DepartureTownId INT NOT NULL FOREIGN KEY REFERENCES Towns(Id),
			 ArrivalTownId INT NOT NULL FOREIGN KEY REFERENCES Towns(Id)
)

CREATE TABLE TrainsRailwayStations(
			 TrainId INT NOT NULL FOREIGN KEY REFERENCES Trains(Id),
			 RailwayStationId INT NOT NULL FOREIGN KEY REFERENCES RailwayStations(Id),
			 PRIMARY KEY(TrainId, RailwayStationId)
)

CREATE TABLE MaintenanceRecords(
			 Id INT PRIMARY KEY IDENTITY,
			 DateOfMaintenance DATE NOT NULL,
			 Details VARCHAR(2000) NOT NULL,
			 TrainId INT NOT NULL FOREIGN KEY REFERENCES Trains(Id)
)

CREATE TABLE Tickets(
			 Id INT PRIMARY KEY IDENTITY,
			 Price DECIMAL(6,2) NOT NULL,
			 DateOfDeparture DATE NOT NULL,
			 DateOfArrival DATE NOT NULL,
			 TrainId INT NOT NULL FOREIGN KEY REFERENCES Trains(Id),
			 PassengerId INT NOT NULL FOREIGN KEY REFERENCES Passengers(Id)
)

--02 INSERT

INSERT INTO Trains(HourOfDeparture, HourOfArrival, DepartureTownId, ArrivalTownId)
	 VALUES
			('07:00', '19:00', 1, 3),
			('08:30', '20:30', 5, 6),
			('09:00', '21:00', 4, 8),
			('06:45', '03:55', 27, 7),
			('10:15', '12:15', 15, 5)

INSERT INTO TrainsRailwayStations(TrainId, RailwayStationId)
	 VALUES
			(36, 1),
			(36, 4),
			(36, 31),
			(36, 57),
			(36, 7),
			(37, 13),
			(37, 54),
			(37, 60),
			(37, 16),
			(38, 10),
			(38, 50),
			(38, 52),
			(38, 22),
			(39, 68),
			(39, 3),
			(39, 31),
			(39, 19),
			(40, 41),
			(40, 7),
			(40, 52),
			(40, 13)

INSERT INTO Tickets(Price, DateOfDeparture, DateOfArrival, TrainId, PassengerId)
	 VALUES
			(90.00, '2023-12-01', '2023-12-01', 36, 1),
			(115.00, '2023-08-02', '2023-08-02', 37, 2),
			(160.00, '2023-08-03', '2023-08-03', 38, 3),
			(255.00, '2023-09-01', '2023-09-02', 39, 21),
			(95.00, '2023-09-02', '2023-09-03', 40, 22)

--03.UPDATE

UPDATE Tickets
   SET DateOfDeparture = DATEADD(day, 7, DateOfDeparture),
	   DateOfArrival = DATEADD(day, 7, DateOfArrival)
 WHERE MONTH(DateOfDeparture) > 10

--04.DELETE

DECLARE @BerlinId INT;
DECLARE @TrainId INT;
SELECT @BerlinId = Id FROM Towns WHERE [Name] = 'Berlin'
SELECT @TrainId = Id FROM Trains WHERE DepartureTownId = @BerlinId

DELETE FROM TrainsRailwayStations
	  WHERE TrainId = @TrainId

DELETE FROM Tickets
	  WHERE TrainId = @TrainId

DELETE FROM MaintenanceRecords
	  WHERE TrainId = @TrainId

DELETE FROM Trains
	  WHERE Id = @TrainId

--05. Tickets by Price and Date Departure

  SELECT DateOfDeparture, Price 
    FROM Tickets
ORDER BY Price, DateOfDeparture DESC

--06. Passengers with their Tickets

  SELECT 
		 p.[Name] AS PassengerName,
		 t.Price AS TicketPrice,
		 t.DateOfDeparture,
		 t.TrainId
	FROM Tickets AS t
	JOIN Passengers AS p
	  ON t.PassengerId = p.Id
ORDER BY t.Price DESC, p.[Name]

--07. Railway Stations without Passing Trains

    SELECT
		  t.[Name] AS Town,
		  rs.[Name] AS RailwayStation
	 FROM RailwayStations AS rs
LEFT JOIN TrainsRailwayStations AS trs
	   ON rs.Id = trs.RailwayStationId
LEFT JOIN Towns AS t
	   ON rs.TownId = t.Id
    WHERE trs.TrainId IS NULL
 ORDER BY t.[Name], rs.[Name]

--08. First 3 Trains Between 0800 and 0859

  SELECT TOP(3)
		 tr.Id AS TrainId,
		 tr.HourOfDeparture,
		 ti.Price AS TicketPrice,
		 t.[Name] AS Destination	
	FROM Trains AS tr
	JOIN Tickets AS ti
	  ON tr.Id = ti.TrainId
	JOIN Towns AS t
	  ON t.Id = tr.ArrivalTownId
   WHERE tr.HourOfDeparture LIKE '08:%' AND ti.Price > 50
ORDER BY ti.Price, tr.DepartureTownId

--09. Count of Passengers Paid More Than Average

  SELECT 
		 t.Name,
		 COUNT(*) AS PassengersCount
	FROM Tickets AS ti
	JOIN Passengers AS p
	  ON ti.PassengerId = p.Id
	JOIN Trains AS tr
      ON tr.Id = ti.TrainId
	JOIN Towns AS t
      ON tr.ArrivalTownId = t.Id
   WHERE Price > 76.99
GROUP BY t.[Name]
ORDER BY t.[Name]


--10. Maintenance Inspection with Town and Station

  SELECT 
		 tr.Id AS TrainId,
		 t.[Name] AS DepartureTown,
		 mr.Details
	FROM Trains AS tr
	JOIN MaintenanceRecords as mr
	  ON tr.Id = mr.TrainId
	JOIN Towns AS t
	  ON t.Id = tr.DepartureTownId
   WHERE mr.Details LIKE LOWER('%inspection%')
ORDER BY tr.Id

--11. Towns with Trains

CREATE FUNCTION udf_TownsWithTrains
				(@Name VARCHAR(30))
	RETURNS INT
			 AS
		  BEGIN

				DECLARE @Count INT;
				DECLARE @TownId INT;

				SELECT @TownId = Id 
				  FROM Towns 
				 WHERE [Name] = @Name;
				SELECT @Count = COUNT(*) 
				  FROM Trains 
				 WHERE ArrivalTownId = @TownId OR DepartureTownId = @TownId;

				RETURN @Count;

		   END;


--12. Search Passengers travelling to Specific Town

CREATE PROC usp_SearchByTown
			(@TownName VARCHAR(50)) 
		 AS
	  BEGIN
			DECLARE @TownId INT

			 SELECT @TownId = Id 
			   FROM Towns 
			  WHERE [Name] = @TownName;

			  SELECT 
					 p.[Name] AS PassengerName,
					 ti.DateOfDeparture,
					 tr.HourOfDeparture
				FROM Trains AS tr
				JOIN Tickets AS ti
				  ON tr.Id = ti.TrainId
				JOIN Passengers AS p
				  ON ti.PassengerId = p.Id
			   WHERE tr.ArrivalTownId = @TownId
			ORDER BY ti.DateOfDeparture DESC, p.[Name]

		END;

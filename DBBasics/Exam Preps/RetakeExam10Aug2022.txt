CREATE DATABASE NationalTouristSitesOfBulgaria

-- 01. DDL

CREATE TABLE Categories(
	Id INT PRIMARY KEY IDENTITY,
	[Name] VARCHAR(50) NOT NULL
)

CREATE TABLE Locations(
	Id INT PRIMARY KEY IDENTITY,
	[Name] VARCHAR(50) NOT NULL,
	Municipality VARCHAR(50),
	Province VARCHAR(50)
)

CREATE TABLE Sites(
	Id INT PRIMARY KEY IDENTITY,
	[Name] VARCHAR(100) NOT NULL,
	LocationId INT NOT NULL FOREIGN KEY REFERENCES Locations(Id),
	CategoryId INT NOT NULL FOREIGN KEY REFERENCES Categories(Id),
	Establishment VARCHAR(15)
)

CREATE TABLE Tourists(
	Id INT PRIMARY KEY IDENTITY,
	[Name] VARCHAR(50) NOT NULL,
	Age INT NOT NULL,
	CONSTRAINT CHK_Age CHECK (Age > -1 AND Age < 121),
	PhoneNumber VARCHAR(20) NOT NULL,
	Nationality VARCHAR(30) NOT NULL,
	Reward VARCHAR(20)
)

CREATE TABLE SitesTourists(
	TouristId INT NOT NULL FOREIGN KEY REFERENCES Tourists(Id),
	SiteId INT NOT NULL FOREIGN KEY REFERENCES Sites(Id),
	PRIMARY KEY (TouristId, SiteId)
)

CREATE TABLE BonusPrizes(
	Id INT PRIMARY KEY IDENTITY,
	[Name] VARCHAR(50) NOT NULL
)

CREATE TABLE TouristsBonusPrizes(
	TouristId INT NOT NULL FOREIGN KEY REFERENCES Tourists(Id),
	BonusPrizeId INT NOT NULL FOREIGN KEY REFERENCES BonusPrizes(Id),
	PRIMARY KEY (TouristId, BonusPrizeId)
)

-- 02. Insert

INSERT INTO Tourists([Name], Age, PhoneNumber, Nationality, Reward)
	 VALUES ('Borislava Kazakova', 52, '+359896354244', 'Bulgaria', NULL),
			('Peter Bosh', 48, '+447911844141', 'UK', NULL),
			('Martin Smith', 29, '+353863818592', 'Ireland', 'Bronze badge'),
			('Svilen Dobrev', 49, '+359986584786', 'Bulgaria', 'Silver badge'),
			('Kremena Popova', 38, '+359893298604', 'Bulgaria', NULL)

INSERT INTO Sites([Name], LocationId, CategoryId, Establishment)
	 VALUES ('Ustra fortress', 90, 7, 'X'),
			('Karlanovo Pyramids', 65, 7, NULL),
			('The Tomb of Tsar Sevt', 63, 8, 'V BC'),
			('Sinite Kamani Natural Park', 17, 1, NULL),
			('St. Petka of Bulgaria â€“ Rupite', 92, 6, '1994')

-- 03. Update

UPDATE Sites
   SET Establishment = '(not defined)'
 WHERE Establishment IS NULL

-- 04. Delete

DELETE FROM TouristsBonusPrizes
	  WHERE BonusPrizeId IN 
			(SELECT Id FROM BonusPrizes 
			WHERE [Name] = 'Sleeping bag')

DELETE FROM BonusPrizes
	  WHERE [Name] = 'Sleeping bag'

-- 05. Tourists

  SELECT [Name],
		 Age, 
		 PhoneNumber, 
		 Nationality 
	FROM Tourists
ORDER BY Nationality, 
		 Age DESC, 
		 [Name]

-- 06. Sites with Their Location and Category

  SELECT s.[Name] AS [Site],
		 l.[Name] AS [Location], 
		 s.Establishment, 
		 c.[Name] AS Category
	FROM Sites AS s
	JOIN Locations AS l
	  ON s.LocationId = l.Id
	JOIN Categories AS c
	  ON c.Id = s.CategoryId
ORDER BY Category DESC, 
		 [Location], 
		 [Site]

-- 07. Count of Sites in Sofia Province

  SELECT l.Province, 
		 l.Municipality, 
		 l.[Name] AS [Location],
		 COUNT(l.[Name]) AS CountOfSites
	FROM Locations AS l
	JOIN Sites AS s 
	  ON l.Id = s.LocationId
   WHERE l.Province = 'Sofia'
GROUP BY l.Province, 
	     l.Municipality, 
		 l.[Name]
ORDER BY CountOfSites DESC, 
		 [Location]

-- 08. Tourist Sites established BC

  SELECT s.[Name] AS [Site],
		 l.[Name] AS [Location],
		 l.Municipality,
		 l.Province, 
		 s.Establishment  
    FROM Sites AS s
	JOIN Locations AS l
	  ON s.LocationId = l.Id
   WHERE LEFT(l.[Name], 1) NOT IN ('B', 'M', 'D')
		 AND s.Establishment LIKE ('%BC')
ORDER BY s.[Name]


-- 09. Tourists with their Bonus Prizes

   SELECT t.[Name], 
		  t.Age, 
		  t.PhoneNumber, 
		  t.Nationality, 
		  COALESCE(bp.[Name],'(no bonus prize)') AS Reward
	 FROM Tourists AS t
LEFT JOIN TouristsBonusPrizes AS tbp
	   ON t.Id = tbp.TouristId 
LEFT JOIN BonusPrizes AS bp
	   ON bp.Id = tbp.BonusPrizeId
 ORDER BY t.[Name]


 -- 10. Tourists visiting History & Archaeology sites

   SELECT 
 DISTINCT 
		  SUBSTRING(t.[Name], 
					CHARINDEX(' ', t.[Name]) + 1,
					LEN(t.[Name]) - CHARINDEX(' ', t.[Name]))
	   AS LastName,
		  t.Nationality,
		  t.Age,
		  t.PhoneNumber
	 FROM Tourists AS t
	 JOIN SitesTourists AS st
	   ON t.Id = st.TouristId
	 JOIN Sites AS s
	   ON s.Id = st.SiteId
	 JOIN Categories AS c
	   ON c.Id = s.CategoryId
    WHERE c.[Name] = 'History and archaeology'

-- 11. Tourists Count on a Tourist Site

CREATE FUNCTION udf_GetTouristsCountOnATouristSite (@Site VARCHAR(100))
	RETURNS INT 
	      BEGIN

	    DECLARE @TouristVisistedCount INT;

		 SELECT @TouristVisistedCount = COUNT(*) 
		   FROM Tourists AS t
		   JOIN SitesTourists AS st
		     ON t.Id = st.TouristId
		   JOIN Sites AS s
			 ON s.Id = st.SiteId
		  WHERE s.[Name] = @Site

	     RETURN @TouristVisistedCount
		   END;


-- 12. Annual Reward Lottery

CREATE PROCEDURE usp_AnnualRewardLottery(@TouristName VARCHAR(50))
			  AS
		   BEGIN 

		    WITH TouristStatistics AS (
		  SELECT t.[Name], COUNT(*) AS NumberOfSites FROM Tourists AS t
			JOIN SitesTourists AS st
			  ON t.Id = st.TouristId
			JOIN Sites AS s
			  ON s.Id = st.SiteId
		   WHERE t.[Name] = @TouristName
		GROUP BY t.[Name])
		  SELECT [Name], 
				 CASE 
					   WHEN NumberOfSites >= 100 THEN 'Gold badge'
					   WHEN NumberOfSites >= 50 THEN 'Silver badge'
					   WHEN NumberOfSites >= 25 THEN 'Bronze badge'
					   ELSE NULL
			     END AS Reward
		    FROM TouristStatistics

			END;
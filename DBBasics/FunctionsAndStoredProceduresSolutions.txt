Functions And Stored Procedures Solutions

01. Employees with Salary Above 35000

CREATE PROC dbo.usp_GetEmployeesSalaryAbove35000 
		 AS 
			SELECT 
				  FirstName,
				  LastName
			 FROM Employees
			WHERE Salary > 35000

--EXECUTE usp_GetEmployeesSalaryAbove35000 


02. Employees with Salary Above Number

CREATE PROC dbo.usp_GetEmployeesSalaryAboveNumber
			(@SalaryThreshold DECIMAL(18,4))
		 AS
			 SELECT 
				   FirstName,
				   LastName
			  FROM Employees
			 WHERE Salary >= @SalaryThreshold

--EXECUTE usp_GetEmployeesSalaryAboveNumber 48100


03. Town Names Starting With

CREATE PROC dbo.usp_GetTownsStartingWith
			(@StartingString VARCHAR(20))
		 AS
			 SELECT
				   [Name]
			  FROM Towns
			 WHERE LOWER(LEFT([Name], LEN(@StartingString))) = LOWER(@StartingString)

--EXECUTE usp_GetTownsStartingWith 'b'


04. Employees from Town

CREATE PROC dbo.usp_GetEmployeesFromTown
			(@Town VARCHAR(100))
		 AS
				SELECT 
					  FirstName,
					  LastName
				 FROM Employees AS e
				 JOIN Addresses AS a
				   ON e.AddressID = a.AddressID
				 JOIN Towns AS t
				   ON t.TownID = a.TownID
				WHERE t.Name = @Town
			
--EXECUTE usp_GetEmployeesFromTown Sofia


05. Salary Level Function

	CREATE FUNCTION ufn_GetSalaryLevel
					(@Salary DECIMAL(18,4))
RETURNS VARCHAR(20)
				AS
			 BEGIN
		   DECLARE @salaryLevel VARCHAR(20)

				   IF (@Salary < 30000)
				   SET @salaryLevel = 'Low'
				   ELSE IF (@Salary BETWEEN 30000 AND 50000)
				   SET @salaryLevel = 'Average'
				   ELSE
				   SET @salaryLevel = 'High'

				   RETURN @salaryLevel
			   END;
	


06. Employees by Salary Level

CREATE PROC usp_EmployeesBySalaryLevel
			(@salaryLevel VARCHAR(20))
	     AS
				SELECT 
					  FirstName,
					  LastName
				 FROM Employees
				WHERE dbo.ufn_GetSalaryLevel(Salary) = @salaryLevel
	
--EXECUTE usp_EmployeesBySalaryLevel 'High'


07. Define Function

CREATE FUNCTION ufn_IsWordComprised
				(@SetOfLetters VARCHAR(100), @Word VARCHAR(100)) 
	RETURNS BIT
			 AS
		  BEGIN
				DECLARE @isComprised BIT = 1
				DECLARE @currentPosition INT = 1

						WHILE @currentPosition <= LEN(@Word) AND @isComprised = 1
						BEGIN
							IF (CHARINDEX(LOWER(SUBSTRING(@Word, @currentPosition, 1)), LOWER(@SetOfLetters)) = 0)
							SET @isComprised = 0
							ELSE SET @currentPosition += 1
						END;
				 RETURN @isComprised;
		   END;

--SELECT dbo.ufn_IsWordComprised('abcde', 'bad') AS IsComprised;
--SELECT dbo.ufn_IsWordComprised('abcde', 'cat') AS IsComprised;


08.Delete Employees and Departments

CREATE PROC usp_DeleteEmployeesFromDepartment (@departmentId INT) 
		 AS
				 DECLARE  @employeesToDelete TABLE ([Id] INT)
	
			 INSERT INTO @employeesToDelete
				  SELECT EmployeeID
				    FROM Employees
				   WHERE DepartmentID = @departmentId

			 DELETE FROM EmployeesProjects
			       WHERE EmployeeID IN (SELECT * FROM @employeesToDelete)

			ALTER TABLE Departments
			ALTER COLUMN ManagerID INT

				  UPDATE Departments
					 SET ManagerID = NULL
				   WHERE ManagerID IN (SELECT * FROM @employeesToDelete)

				  UPDATE Employees
				     SET ManagerID = NULL
				   WHERE ManagerID IN (SELECT * FROM @employeesToDelete)

			 DELETE FROM Employees
				   WHERE DepartmentID = @departmentId

			 DELETE FROM Departments
				   WHERE DepartmentID = @departmentId

				  SELECT 
						COUNT(*) AS [Count] 
					FROM Employees
				   WHERE DepartmentID = @departmentId


09. Find Full Name

CREATE PROC
			dbo.usp_GetHoldersFullName AS
	 SELECT 
			CONCAT_WS(' ', FirstName, LastName) AS [Full Name]
	   FROM AccountHolders

--EXEC usp_GetHoldersFullName


10. People with Balance Higher Than

CREATE PROC usp_GetHoldersWithBalanceHigherThan 
			(@threshold MONEY) AS
	 SELECT 
			ah.FirstName,
			ah.LastName
	   FROM AccountHolders AS ah
	   JOIN Accounts AS a
	     ON ah.Id = a.AccountHolderId
   GROUP BY ah.FirstName, ah.LastName
     HAVING SUM(a.Balance) > @threshold
   ORDER BY ah.FirstName, ah.LastName


11. Future Value Function

CREATE FUNCTION ufn_CalculateFutureValue 
				(@sum DECIMAL(10,2), @yearlyInterestRate FLOAT, @years INT)
RETURNS DECIMAL (12,4)
			AS
		 BEGIN
		DECLARE @FutureValue DECIMAL(12,4)
		    SET @FutureValue = @sum * POWER((1 + @yearlyInterestRate), @years)
		 RETURN @FutureValue
			END;


12. Calculating Interest

CREATE PROC usp_CalculateFutureValueForAccount
			(@accountId INT, @interestRate FLOAT)
		 AS
            SELECT 
				   a.Id AS [Account Id],
				   ah.FirstName,
				   ah.LastName,
				   a.Balance,
				   dbo.ufn_CalculateFutureValue(a.Balance, @interestRate, 5) AS [Balance in  5 years]
			  FROM AccountHolders AS ah
			  JOIN Accounts AS a
				ON ah.Id = a.AccountHolderId
			 WHERE a.Id = @accountId



13. Cash in User Games Odd Rows

CREATE FUNCTION ufn_CashInUsersGames
				(@gameName VARCHAR(50))
		RETURNS @result 
		  TABLE(SumCash MONEY NOT NULL)
		     AS
		  BEGIN
				WITH FilteredGame AS(
				SELECT ug.Cash,
				ROW_NUMBER() OVER(ORDER BY ug.Cash DESC) AS RowNumber 
				FROM Games AS g
				JOIN UsersGames AS ug 
				ON g.Id = ug.GameId
				WHERE g.Name = @gameName)

				INSERT INTO @result SELECT SUM(Cash) AS SumCash FROM FilteredGame
				WHERE RowNumber % 2 <> 0 
	     RETURN
		    END;